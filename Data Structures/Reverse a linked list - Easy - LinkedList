https://www.hackerrank.com/challenges/reverse-a-linked-list/problem

Note : I am presenting 3 solutions, 2 iterative ones which one of which you will find anywhere(2nd one), first one is a really novice way to solve the problem but it gives a good idea of algorithmic thinking. the 3rd one is a exploitative mechanism. I will also try to add a fourth recursive approach although I dont recommend it for python as pythons recursion is limited to 1000.


#!/bin/python3

import math
import os
import random
import re
import sys

class SinglyLinkedListNode:
    def __init__(self, node_data):
        self.data = node_data
        self.next = None

class SinglyLinkedList:
    def __init__(self):
        self.head = None
        self.tail = None

    def insert_node(self, node_data):
        node = SinglyLinkedListNode(node_data)

        if not self.head:
            self.head = node
        else:
            self.tail.next = node


        self.tail = node

def print_singly_linked_list(node, sep, fptr):
    while node:
        fptr.write(str(node.data))

        node = node.next

        if node:
            fptr.write(sep)

# Complete the reverse function below.

#
# For your reference:
#
# SinglyLinkedListNode:
#     int data
#     SinglyLinkedListNode next
#
#
def reverse(head):
    if head == None:
        return None
    else:
        li = []
        temp = head
        while temp != None:
            li.append(temp.data)
            temp = temp.next
        
        li.reverse()
    head = SinglyLinkedListNode(li[0])
    temp = head
    for i in range(1,len(li)):
        temp.next = SinglyLinkedListNode(li[i])
        temp = temp.next

    return(head)




if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    tests = int(input())

    for tests_itr in range(tests):
        llist_count = int(input())

        llist = SinglyLinkedList()

        for _ in range(llist_count):
            llist_item = int(input())
            llist.insert_node(llist_item)

        llist1 = reverse(llist.head)

        print_singly_linked_list(llist1, ' ', fptr)
        fptr.write('\n')

    fptr.close()




#Second Method



def Reverse(head):
    if head is None:
        return None
    prev = None
    curr = head
    aux = head.next
    while curr is not None:
        curr.next = prev
        prev = curr
        curr = aux
        if curr is not None:
            aux = aux.next
    return prev
    
    
    
#Third(Still left to try)

def Reverse(head):
    prev = None
    while head:
        prev = Node(head.data, prev)
        head = head.next
    return prev