https://www.hackerrank.com/challenges/binary-search-tree-lowest-common-ancestor/problem

Note : Focus on the properties of binary search tress, do we use traversals? what traversal, the inorder looks pretty fine for this but is it? ah! the elements are large or small. So the idea here is that if the we are at a point where the current node is greater thana the first element and smalller than the scond that is our answer. i its smaller than both we return the right.node to the "lca" function


Q: what happens when instead of returning a recursive function you just call it?

class Node:
    def __init__(self, info): 
        self.info = info  
        self.left = None  
        self.right = None 
        self.level = None 

    def __str__(self):
        return str(self.info) 

class BinarySearchTree:
    def __init__(self): 
        self.root = None

    def create(self, val):  
        if self.root == None:
            self.root = Node(val)
        else:
            current = self.root
         
            while True:
                if val < current.info:
                    if current.left:
                        current = current.left
                    else:
                        current.left = Node(val)
                        break
                elif val > current.info:
                    if current.right:
                        current = current.right
                    else:
                        current.right = Node(val)
                        break
                else:
                    break

# Enter your code here. Read input from STDIN. Print output to STDOUT
'''
class Node:
      def __init__(self,info): 
          self.info = info  
          self.left = None  
          self.right = None 
           

       // this is a node of the tree , which contains info as data, left , right
'''

def lca(root, v1, v2):
    if root.info < v1 and root.info < v2:
        return lca(root.right,v1,v2)
    
    elif root.info>v1 and root.info>v2:
        return lca(root.left,v1,v2)

    else:
        return root


tree = BinarySearchTree()
t = int(input())

arr = list(map(int, input().split()))

for i in range(t):
    tree.create(arr[i])

v = list(map(int, input().split()))

ans = lca(tree.root, v[0], v[1])
print (ans.info)
