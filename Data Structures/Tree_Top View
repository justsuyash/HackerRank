https://www.hackerrank.com/challenges/tree-top-view/problem

Note : Find additional solutions to these and get the intuiton behind this

class Node:
    def __init__(self, info): 
        self.info = info  
        self.left = None  
        self.right = None 
        self.level = None 

    def __str__(self):
        return str(self.info) 

class BinarySearchTree:
    def __init__(self): 
        self.root = None

    def create(self, val):  
        if self.root == None:
            self.root = Node(val)
        else:
            current = self.root
         
            while True:
                if val < current.info:
                    if current.left:
                        current = current.left
                    else:
                        current.left = Node(val)
                        break
                elif val > current.info:
                    if current.right:
                        current = current.right
                    else:
                        current.right = Node(val)
                        break
                else:
                    break

"""
Node is defined as
self.left (the left child of the node)
self.right (the right child of the node)
self.info (the value of the node)
"""
def topView(root):
    res=''
    from collections import defaultdict
    queue = [(root,0)]
    hashtable = defaultdict(lambda:[])
    for node,level in queue:
        if node is not None:
            hashtable[level].append(node.info)
            queue.extend([(node.left,level-1),(node.right,level+1)])

    if hashtable is not None:
        for level in range(min(hashtable.keys()),max(hashtable.keys())+1):
            print(hashtable[level][0],end=' ')

        else:
            return None






tree = BinarySearchTree()
t = int(input())

arr = list(map(int, input().split()))

for i in range(t):
    tree.create(arr[i])

topView(tree.root)



########Second Solution


"""
Node is defined as
self.left (the left child of the node)
self.right (the right child of the node)
self.info (the value of the node)
"""

import queue
from collections import defaultdict
import operator

def topView(root):
    if root is None:
        return
    
    q = queue.Queue()
    d = defaultdict(list)
    
    x = [root, 0]
    q.put(x)
    
    while not q.empty():
        p = q.get()
        
        if p[1] not in d:
            d[p[1]].append(p[0].info)
        
        if p[0].left is not None:
            y = [p[0].left, p[1]-1]
            q.put(y)
        
        if p[0].right is not None:
            y = [p[0].right, p[1]+1]
            q.put(y)
    
    sd = sorted(d.items(), key=operator.itemgetter(0))
    
    for i in range(len(sd)):
        print(sd[i][1][0], end=' ')
        