https://www.hackerrank.com/challenges/binary-search-tree-insertion/problem


Very easy problem, dont be scared, we will go step by step, start explaining from self.root stuff: Go Crazy everyone, However the recursion is the tricky part its by design meant to take only one argument and hence its a tricy yet rerwarding process to think about it in this way as there will be a lot of code that has been written before you and instead of modyfying the existing code(Dont do that WTF is wrong with you) we just have to find a workaround and this does that.


class Node:
    def __init__(self, info):
        self.info = info  
        self.left = None  
        self.right = None 
        self.level = None 

    def __str__(self):
        return str(self.info) 

def preOrder(root):
    if root == None:
        return
    print (root.info, end=" ")
    preOrder(root.left)
    preOrder(root.right)
    
class BinarySearchTree:
    def __init__(self): 
        self.root = None

#Node is defined as
#self.left (the left child of the node)
#self.right (the right child of the node)
#self.info (the value of the node)

    def insert(self, val):
        temp = self.root
        if not temp:
            self.root = Node(val)
            return(self.root)
        else:
            while True:
                if temp.info > val:
                    if temp.left:
                        temp = temp.left
                    else:
                        temp.left = Node(val)
                        break
                elif temp.info <= val:
                    if temp.right:
                        temp = temp.right
                    else:
                        temp.right = Node(val)
                        break

        return (self.root)

tree = BinarySearchTree()
t = int(input())

arr = list(map(int, input().split()))

for i in range(t):
    tree.insert(arr[i])

preOrder(tree.root)



#uSing Recursion:


class Node:
    def __init__(self, info):
        self.info = info  
        self.left = None  
        self.right = None 
        self.level = None 

    def __str__(self):
        return str(self.info) 

def preOrder(root):
    if root == None:
        return
    print (root.info, end=" ")
    preOrder(root.left)
    preOrder(root.right)
    
class BinarySearchTree:
    def __init__(self): 
        self.root = None

#Node is defined as
#self.left (the left child of the node)
#self.right (the right child of the node)
#self.info (the value of the node)

    def insertion(self,temp,val):
        if temp.info>val:
            if temp.left is None:
                temp.left = Node(val)
            else:
                temp.left = self.insertion(temp.left,val)
        elif temp.info <=val:
            if temp.right is None:
                temp.right = Node(val)
            else:
                temp.right =self.insertion(temp.right,val)
        return temp

    def insert(self, val):
        if self.root is None:
            self.root = Node(val)
            return self.root
        else:
            self.insertion(self.root,val)

tree = BinarySearchTree()
t = int(input())

arr = list(map(int, input().split()))

for i in range(t):
    tree.insert(arr[i])

preOrder(tree.root)


